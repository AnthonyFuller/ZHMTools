From 50413621e5897df34aa7af8d08828746a540ea80 Mon Sep 17 00:00:00 2001
From: OrfeasZ <orfeaz@gmail.com>
Date: Thu, 15 Jun 2023 14:47:22 +0300
Subject: [PATCH] Patch simdjson

---
 Libraries/ResourceLib/Src/External/simdjson.h | 66 ++++++++++++++++++-
 1 file changed, 64 insertions(+), 2 deletions(-)

diff --git a/Libraries/ResourceLib/Src/External/simdjson.h b/Libraries/ResourceLib/Src/External/simdjson.h
index f388062..6bd16b6 100644
--- a/Libraries/ResourceLib/Src/External/simdjson.h
+++ b/Libraries/ResourceLib/Src/External/simdjson.h
@@ -2343,6 +2343,8 @@ SIMDJSON_DISABLE_UNDESIRED_WARNINGS
 
 namespace simdjson {
 
+static std::string_view g_last_key = "";
+
 /**
  * All possible errors returned by simdjson. These error codes are subject to change
  * and not all simdjson kernel returns the same error code given the same input: it is not
@@ -2411,14 +2413,28 @@ struct simdjson_error : public std::exception {
    * Create an exception from a simdjson error code.
    * @param error The error code
    */
-  simdjson_error(error_code error) noexcept : _error{error} { }
+  simdjson_error(error_code error) noexcept : _error{error}, _last_key(simdjson::g_last_key)
+  {
+      if (last_key().size() > 0) {
+          snprintf(_error_str, sizeof(_error_str), "%s Last field accessed: %s", error_message(_error), std::string(last_key()).c_str());
+      }
+      else {
+          snprintf(_error_str, sizeof(_error_str), "%s", error_message(_error));
+      }
+  }
   /** The error message */
-  const char *what() const noexcept { return error_message(error()); }
+  const char *what() const noexcept { return _error_str; }
   /** The error code */
   error_code error() const noexcept { return _error; }
+  /** The last key accessed before this error */
+  std::string_view last_key() const noexcept { return _last_key; }
 private:
   /** The error code that was used */
   error_code _error;
+  /** The last key accessed before this error */
+  std::string_view _last_key;
+  /** Buffer for the error message. */
+  char _error_str[1024 * 16];
 };
 
 namespace internal {
@@ -5415,6 +5431,30 @@ enum class element_type {
   NULL_VALUE = 'n' ///< null
 };
 
+inline std::string element_type_to_string(element_type type) {
+    switch (type) {
+    case element_type::ARRAY:
+        return "array";
+    case element_type::OBJECT:
+        return "object";
+    case element_type::INT64:
+        return "int64";
+    case element_type::UINT64:
+        return "uint64";
+    case element_type::DOUBLE:
+        return "double";
+    case element_type::STRING:
+        return "string";
+    case element_type::BOOL:
+        return "bool";
+    case element_type::NULL_VALUE:
+        return "null";
+    default:
+        return "";
+    }
+}
+
+
 /**
  * A JSON element.
  *
@@ -7269,6 +7309,7 @@ inline simdjson_result<bool> element::get_bool() const noexcept {
   } else if(tape.is_false()) {
     return false;
   }
+  fprintf(stderr, "[ERROR] Expected 'bool' type but found '%s'.\n", element_type_to_string(type()).c_str());
   return INCORRECT_TYPE;
 }
 inline simdjson_result<const char *> element::get_c_str() const noexcept {
@@ -7278,6 +7319,7 @@ inline simdjson_result<const char *> element::get_c_str() const noexcept {
       return tape.get_c_str();
     }
     default:
+    fprintf(stderr, "[ERROR] Expected 'string' type but found '%s'.\n", element_type_to_string(type()).c_str());
       return INCORRECT_TYPE;
   }
 }
@@ -7288,6 +7330,7 @@ inline simdjson_result<size_t> element::get_string_length() const noexcept {
       return tape.get_string_length();
     }
     default:
+      fprintf(stderr, "[ERROR] Expected 'string' type but found '%s'.\n", element_type_to_string(type()).c_str());
       return INCORRECT_TYPE;
   }
 }
@@ -7297,6 +7340,7 @@ inline simdjson_result<std::string_view> element::get_string() const noexcept {
     case internal::tape_type::STRING:
       return tape.get_string_view();
     default:
+      fprintf(stderr, "[ERROR] Expected 'string' type but found '%s'.\n", element_type_to_string(type()).c_str());
       return INCORRECT_TYPE;
   }
 }
@@ -7310,6 +7354,7 @@ inline simdjson_result<uint64_t> element::get_uint64() const noexcept {
       }
       return uint64_t(result);
     }
+    fprintf(stderr, "[ERROR] Expected 'uint64' type but found '%s'.\n", element_type_to_string(type()).c_str());
     return INCORRECT_TYPE;
   }
   return tape.next_tape_value<int64_t>();
@@ -7325,6 +7370,7 @@ inline simdjson_result<int64_t> element::get_int64() const noexcept {
       }
       return static_cast<int64_t>(result);
     }
+    fprintf(stderr, "[ERROR] Expected 'int64' type but found '%s'.\n", element_type_to_string(type()).c_str());
     return INCORRECT_TYPE;
   }
   return tape.next_tape_value<int64_t>();
@@ -7346,6 +7392,7 @@ inline simdjson_result<double> element::get_double() const noexcept {
     } else if(tape.is_int64()) {
       return double(tape.next_tape_value<int64_t>());
     }
+    fprintf(stderr, "[ERROR] Expected 'double' type but found '%s'.\n", element_type_to_string(type()).c_str());
     return INCORRECT_TYPE;
   }
   // this is common:
@@ -7357,6 +7404,7 @@ inline simdjson_result<array> element::get_array() const noexcept {
     case internal::tape_type::START_ARRAY:
       return array(tape);
     default:
+      fprintf(stderr, "[ERROR] Expected 'array' type but found '%s'.\n", element_type_to_string(type()).c_str());
       return INCORRECT_TYPE;
   }
 }
@@ -7366,6 +7414,7 @@ inline simdjson_result<object> element::get_object() const noexcept {
     case internal::tape_type::START_OBJECT:
       return object(tape);
     default:
+      fprintf(stderr, "[ERROR] Expected 'object' type but found '%s'.\n", element_type_to_string(type()).c_str());
       return INCORRECT_TYPE;
   }
 }
@@ -8149,6 +8198,7 @@ inline simdjson_result<element> object::at_pointer(std::string_view json_pointer
 }
 
 inline simdjson_result<element> object::at_key(std::string_view key) const noexcept {
+  g_last_key = key;
   iterator end_field = end();
   for (iterator field = begin(); field != end_field; ++field) {
     if (field.key_equals(key)) {
@@ -8161,6 +8211,7 @@ inline simdjson_result<element> object::at_key(std::string_view key) const noexc
 // https://github.com/simdjson/simdjson/issues/323
 // People do seek keys in a case-insensitive manner.
 inline simdjson_result<element> object::at_key_case_insensitive(std::string_view key) const noexcept {
+  g_last_key = key;
   iterator end_field = end();
   for (iterator field = begin(); field != end_field; ++field) {
     if (field.key_equals_case_insensitive(key)) {
@@ -25080,6 +25131,11 @@ public:
    */
   inline simdjson_result<const char *> current_location() const noexcept;
 
+  /**
+   * Returns the current position in the document.
+   */
+  inline token_position current_position() noexcept;
+
   /**
    * Returns true if this document has been fully parsed.
    * If you have consumed the whole document and at_end() returns
@@ -28293,6 +28349,7 @@ simdjson_warn_unused simdjson_inline simdjson_result<bool> value_iterator::has_n
 }
 
 simdjson_warn_unused simdjson_inline simdjson_result<bool> value_iterator::find_field_raw(const std::string_view key) noexcept {
+  g_last_key = key;
   error_code error;
   bool has_value;
   //
@@ -28390,6 +28447,7 @@ simdjson_warn_unused simdjson_inline simdjson_result<bool> value_iterator::find_
 SIMDJSON_PUSH_DISABLE_WARNINGS
 SIMDJSON_DISABLE_STRICT_OVERFLOW_WARNING
 simdjson_warn_unused simdjson_inline simdjson_result<bool> value_iterator::find_field_unordered_raw(const std::string_view key) noexcept {
+  g_last_key = key;
   /**
    * When find_field_unordered_raw is called, we can either be pointing at the
    * first key, pointing outside (at the closing brace) or if a key was matched
@@ -29662,6 +29720,10 @@ inline simdjson_result<const char *> document::current_location() const noexcept
   return iter.current_location();
 }
 
+inline token_position document::current_position() noexcept {
+  return iter.position();
+}
+
 inline int32_t document::current_depth() const noexcept {
   return iter.depth();
 }
-- 
2.40.1.windows.1

