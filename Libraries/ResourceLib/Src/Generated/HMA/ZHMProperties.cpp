/*
 * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing.
 *
 * If you wish to regenerate this file because of a game update use the ZHMTools CodeGen tool:
 * https://github.com/OrfeasZ/ZHMTools/releases
 */

#include "ZHMProperties.h"
#include <Util/BinaryStreamReader.h>

std::unordered_map<uint32_t, std::string_view>* ZHMProperties::g_Properties = nullptr;

std::string ZHMProperties::PropertyToString(uint32_t p_PropertyId)
{
	auto it = g_Properties->find(p_PropertyId);

	if (it == g_Properties->end())
		return "";

	return std::string(it->second);
}

std::string_view ZHMProperties::PropertyToStringView(uint32_t p_PropertyId)
{
	auto it = g_Properties->find(p_PropertyId);

	if (it == g_Properties->end())
		return "";

	return it->second;
}

void ZHMProperties::RegisterProperties()
{
	g_Properties = new std::unordered_map<uint32_t, std::string_view>();

	BinaryStreamReader s_PropertyReader(g_PropertiesData, g_PropertiesDataSize);
	BinaryStreamReader s_CustomPropertyReader(g_CustomPropertiesData, g_CustomPropertiesDataSize);

	for (size_t i = 0; i < g_PropertiesCount; ++i)
	{
		const auto s_PropertyId = s_PropertyReader.Read<uint32_t>();
		(*g_Properties)[s_PropertyId] = s_PropertyReader.ReadShortStringView();
	}

	for (size_t i = 0; i < g_CustomPropertiesCount; ++i)
	{
		const auto s_PropertyId = s_CustomPropertyReader.Read<uint32_t>();
		(*g_Properties)[s_PropertyId] = s_CustomPropertyReader.ReadShortStringView();
	}
}

ZHMPropertyRegistrar g_PropertyRegistrar = ZHMPropertyRegistrar();

